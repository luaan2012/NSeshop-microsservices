{"ast":null,"code":"import { HttpHeaders, HttpErrorResponse } from \"@angular/common/http\";\nimport { environment } from 'src/environments/environment';\nimport { throwError } from \"rxjs\";\nexport class BaseService {\n  constructor() {\n    this.UrlServiceV1 = environment.apiUrlBase;\n  }\n  // public LocalStorage = new LocalStorageUtils();\n  ObterHeaderJson() {\n    return {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json'\n      })\n    };\n  }\n  // protected ObterAuthHeaderJson() {\n  //     return {\n  //         headers: new HttpHeaders({\n  //             'Content-Type': 'application/json',\n  //             'Authorization': `Bearer ${this.LocalStorage.obterTokenUsuario()}`\n  //         })\n  //     };\n  // }\n  extractData(response) {\n    return response.data || {};\n  }\n  serviceError(response) {\n    let customError = [];\n    let customResponse = {\n      error: {\n        errors: []\n      }\n    };\n    if (response instanceof HttpErrorResponse) {\n      if (response.statusText === \"Unknown Error\") {\n        customError.push(\"Ocorreu um erro desconhecido\");\n        response.error.errors = customError;\n      }\n    }\n    // if (response.status === 500) {\n    //     customError.push(\"Ocorreu um erro no processamento, tente novamente mais tarde ou contate o nosso suporte.\");\n    //     // Erros do tipo 500 não possuem uma lista de erros\n    //     // A lista de erros do HttpErrorResponse é readonly\n    //     customResponse.error.errors = customError;\n    //     return throwError(customResponse);\n    // }\n    console.error(response);\n    return throwError(response);\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,WAAW,EAAEC,iBAAiB,QAAQ,sBAAsB;AACrE,SAASC,WAAW,QAAQ,8BAA8B;AAC1D,SAASC,UAAU,QAAQ,MAAM;AAEjC,OAAM,MAAgBC,WAAW;EAAjCC;IAEc,iBAAY,GAAWH,WAAW,CAACI,UAAU;EA+C3D;EA9CI;EAEUC,eAAe;IACrB,OAAO;MACHC,OAAO,EAAE,IAAIR,WAAW,CAAC;QACrB,cAAc,EAAE;OACnB;KACJ;EACL;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEUS,WAAW,CAACC,QAAa;IAC/B,OAAOA,QAAQ,CAACC,IAAI,IAAI,EAAE;EAC9B;EAEUC,YAAY,CAACF,QAAwB;IAC3C,IAAIG,WAAW,GAAa,EAAE;IAC9B,IAAIC,cAAc,GAAG;MAAEC,KAAK,EAAE;QAAEC,MAAM,EAAE;MAAE;IAAE,CAAC;IAE7C,IAAIN,QAAQ,YAAYT,iBAAiB,EAAE;MAEvC,IAAIS,QAAQ,CAACO,UAAU,KAAK,eAAe,EAAE;QACzCJ,WAAW,CAACK,IAAI,CAAC,8BAA8B,CAAC;QAChDR,QAAQ,CAACK,KAAK,CAACC,MAAM,GAAGH,WAAW;;;IAG3C;IACA;IAEA;IACA;IACA;IACA;IACA;IAEAM,OAAO,CAACJ,KAAK,CAACL,QAAQ,CAAC;IACvB,OAAOP,UAAU,CAACO,QAAQ,CAAC;EAC/B","names":["HttpHeaders","HttpErrorResponse","environment","throwError","BaseService","constructor","apiUrlBase","ObterHeaderJson","headers","extractData","response","data","serviceError","customError","customResponse","error","errors","statusText","push","console"],"sourceRoot":"","sources":["C:\\Users\\luan.santos\\Desktop\\Projetos e anotações\\NerdStoreDistribuida\\src\\web\\WebSPA\\src\\app\\services\\base.service.ts"],"sourcesContent":["import { HttpHeaders, HttpErrorResponse } from \"@angular/common/http\";\r\nimport { environment } from 'src/environments/environment';\r\nimport { throwError } from \"rxjs\";\r\n\r\nexport abstract class BaseService {\r\n\r\n    protected UrlServiceV1: string = environment.apiUrlBase;\r\n    // public LocalStorage = new LocalStorageUtils();\r\n\r\n    protected ObterHeaderJson() {\r\n        return {\r\n            headers: new HttpHeaders({\r\n                'Content-Type': 'application/json'\r\n            })\r\n        };\r\n    }\r\n\r\n    // protected ObterAuthHeaderJson() {\r\n    //     return {\r\n    //         headers: new HttpHeaders({\r\n    //             'Content-Type': 'application/json',\r\n    //             'Authorization': `Bearer ${this.LocalStorage.obterTokenUsuario()}`\r\n    //         })\r\n    //     };\r\n    // }\r\n\r\n    protected extractData(response: any) {\r\n        return response.data || {};\r\n    }\r\n\r\n    protected serviceError(response: Response | any) {\r\n        let customError: string[] = [];\r\n        let customResponse = { error: { errors: [] }}\r\n\r\n        if (response instanceof HttpErrorResponse) {\r\n\r\n            if (response.statusText === \"Unknown Error\") {\r\n                customError.push(\"Ocorreu um erro desconhecido\");\r\n                response.error.errors = customError;\r\n            }\r\n        }\r\n        // if (response.status === 500) {\r\n        //     customError.push(\"Ocorreu um erro no processamento, tente novamente mais tarde ou contate o nosso suporte.\");\r\n\r\n        //     // Erros do tipo 500 não possuem uma lista de erros\r\n        //     // A lista de erros do HttpErrorResponse é readonly\r\n        //     customResponse.error.errors = customError;\r\n        //     return throwError(customResponse);\r\n        // }\r\n\r\n        console.error(response);\r\n        return throwError(response);\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}